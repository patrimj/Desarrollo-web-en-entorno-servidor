1) instalamos jest y supertest
npm install jest supertest

2) Modificamos 'package.json' cambiando en scripts el valor de "test" por "jest".
  
  "scripts": {
    "test": "jest"
  },
  "jest": {
    "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$"
  }
  

3) En una carpeta 'tests' ponemos la clase XXXRoutes.test.js con la siguiente información:
const request = require('supertest');
const express = require('express');
const routes = require('../routes/userRoutes')

const app = express(); // se pone siempre
app.use(express.json()); // se pone siempre
app.use('/', routes); /// se pone siempre

// cada describe es un bloque de test
describe('Testeo de rutas GET', () => {
  it('GET / debería retornar un código 200', async () => {
    const response = await request(app).get('/');
    expect(response.statusCode).toBe(200);
  });

  it('GET /:id? debería retornar un código 200', async () => {
    const response = await request(app).get('/0');
    expect(response.statusCode).toBe(200);
  });
});


describe('Testeo de ruta POST', () => {
   it('POST / debería retornar un código 200', async () => {
    const nuevoUsuario = {
      nombre: "Laura",
      edad:19
    }
    const response = await request(app).post('/').send(nuevoUsuario) 
    expect(response.statusCode).toBe(201);
    expect(response.body.msg).toBe('Elemento insertado');
    expect(response.body.valores.valores).toContainEqual(nuevoUsuario);

    const getResponse = await request(app).get('/');
    expect(getResponse.statusCode).toBe(200);
    expect(getResponse.body.valores.valores).toContainEqual(nuevoUsuario);
  });
});

describe('Pruebas de solicitud PUT', () => {
  it('Debería actualizar un usuario existente', async () => {
    const usuarioActualizado = {
      nombre: "DAW2",
      edad:45
    }

    const response = await request(app)
      .put('/0') 
      .send(usuarioActualizado);

    
    expect(response.statusCode).toBe(202);
    expect(response.body.msg).toBe('Elemento modificado');
    expect(response.body.valores.valores[0]).toEqual(usuarioActualizado);

    const getResponse = await request(app).get('/');
    expect(getResponse.statusCode).toBe(200);
    expect(getResponse.body.valores.valores[0]).toEqual(usuarioActualizado);
  });
});

describe('Pruebas de solicitud DELETE', () => {
  it('Debería eliminar un usuario existente', async () => {
    const response = await request(app).delete('/0');

    expect(response.statusCode).toBe(202);
    expect(response.body.msg).toBe('Elemento borrado');

    //Podemos comprobar que hemos borrado correctamente a ese usuario si modificamos el valor devuelto por la ruta DELETE para que incluya al elemento borrado y poder comprobar que no está.
    //const getResponse = await request(app).get('/');
    //expect(getResponse.body.valores.valores).not.toContainEqual({ nombre: response.body.valores.nombre, edad: response.body.valores.edad });

  });
});

module.exports = testServer;

4) Ejecutamos los tests con: npx jest
Si no los encuentra comprobamos que los tests están en la carpeta tests y su nombre es el mismo que el de las rutas que testean más: .test.js
En package.json añadimos la lína:
,
  "jest": {
    "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$"
  }
  
Quedando:
{
  "name": "ejemploTestsNodeExpress",
  "version": "1.0.0",
  "description": "",
  "main": "./app/app.js",
  "scripts": {
    "test": "jest"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jest": "^29.7.0",
    "supertest": "^6.3.4"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  },
  "jest": {
    "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$"
  }
  
}



5) El siguiente paso sería hacer un mock de datos usando jest.mock. Para ello se deberían envolver las rutas de la API.
const request = require('supertest');
const express = require('express');
const routes = require('../routes/userRoutes');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());
app.use('/', routes);

// Mock de datos para la solicitud GET
const datosMockeados = [
  { nombre: 'Carlos', edad: 18 },
  { nombre: 'Inés', edad: 20 },
  { nombre: 'Javi', edad: 21 },
  { nombre: 'Marina', edad: 22 }
];

describe('Pruebas de la ruta GET /', () => {
  it('Debería devolver datos en el formato correcto', async () => {
    const response = await request(app).get('/');

    expect(response.statusCode).toBe(200);

    expect(response.body).toEqual({ valores: { valores: datosMockeados } });
  });
});


