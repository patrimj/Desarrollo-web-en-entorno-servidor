Nombres correctos:
Modelo
ModeloSeeder
ModeloFactory

php artisan make:factory ProfesorFactory  <--- Hace la Factory para profesores.
php artisan make:seeder ParteSeeder  <--- Hace el Seeder para partes.
php artisan db:seed  <---- Lanza todos los seeders.
php artisan db:seed --class=UserSeeder     <---- Lanza el seeder especificado (no se le pone la extensión php).


******************************** Factoría de profesor: ****************************************
//protected $model = Profesor::class;
//protected $model = "Profesor";


public function definition(): array
    {
        return [
            'nombre' => $this->faker->name,
            'cargo' => $this->faker->randomElement(['profesor', 'jefe de estudios', 'tutor','guardián de la luz de Ellendhil']),
            'departamento' => $this->faker->randomElement(['Informática', 'Administración', 'Educación Física','Frío y Calor','Física o Química']),
            'edad' => rand(18,100),
            'observaciones' => $this->faker->text(100)
        ];
    }

    /**
     * 'afterMaking' se utiliza para definir acciones que se ejecutarán después de que se haya creado una instancia del modelo, pero antes de que se haya guardado en la base de datos.
     * 'afterCreating' se utiliza para definir acciones que se ejecutarán después de que se haya creado una instancia del modelo y esta haya sido guardada en la base de datos.
     */
    public function configure(): static
    {
        return 
        $this
        ->afterCreating(function ($profesor, $faker) {
            $numeroPartes = rand(0,5); // Cambia esto al número deseado de partes por profesor.
            Parte::factory($numeroPartes)->create(['idProfesor' => $profesor->id]);
        })
        // ->afterMaking(function ($profesor, $faker) {
        //    // Hacemos lo que sea con los datos del modelo del profesor antes de guardarlo definitivamente en la base de datos.  
        //    // $profesor->save();
        // })
        ;
    }
    
    
    
******************************* Factoría de Parte: ******************************************
public function definition(): array
    {
        return [
            'alumno' => $this->faker->name,
            'gravedad' => $this->faker->randomElement(['Leve', 'Grave', 'Destierro','Latigazos','Pasar por la quilla']),
            'idProfesor' => $this->faker->randomElement(Profesor::get('id')),
            'observaciones' => $this->faker->text(100)
        ];
    }
    
Seeder de Profesor:
Profesor::factory(10)->create(); --> Las genera y las almacena en la base de datos.
Profesor::factory(3)->make();   --> Las genera y las almacena en un vector pero no en la base de datos.

Seeder de Parte:
Parte::factory()->count(7)->create(); --> Otra forma de especificar cuantos queremos.





***************************** Rutas para probar: ************************************************
Route::get('profesores', function () {
    // $profesores = Profesor::factory()->count(10)->make(); //Con esto se hacen elementos pero no se almacenan en la base de datos.
    $profesores = Profesor::factory(3)->create();
    return response()->json($profesores);
});

Route::get('partes', function () {
    // $partes = Parte::factory(5)->create();
    $partes = Parte::factory(7)->make();
    return response()->json($partes);
});

//Puestos por el profesor 'id'.
Route::get('puestos/{id}', function (string $id) {
    $profesor = Profesor::find($id);
    if ($profesor) {
        $partes = $profesor->partesPuestos;
        return response()->json($partes);
    }
    else {
        return response()->json(['cod' => 200,'msg' => 'No se encontró el profesor'], 200);
    }
});

//Recibidos por el profesor 'id'.
Route::get('recibidos/{id}', function (string $id) {
    return response()->json(Parte::with('partesRecibidos')->where('idprofesor',$id)->get());
});


**************************** Modelos y funciones de agregación: ***********************************************
En Parte:
function partesRecibidos(){
        return $this->belongsTo(Profesor::class, 'idprofesor', 'id');
    }

En Profesor:
public function partesPuestos(){
        return $this->hasMany(Parte::class, 'idprofesor', 'id');
    }


